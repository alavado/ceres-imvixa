library(fpp2)
library(dplyr)
setwd("~/Desktop/electron/ceres-imvixa/src/r")
datos <- readxl::read_excel("datos.xlsx")
aver <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
aver <- aver[aver$`FCB mes` < 1.75 & aver$`FCB mes` > 1, ]
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
stat_smooth()
ggplot(aver, aes(counter, `Mortalidad`, color=`T°`)) +
geom_point() +
stat_smooth()
FCB mes
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
stat_smooth()
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_fill_brewer(palette="Dark2") +
stat_smooth()
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_brewer(palette="Dark2") +
stat_smooth()
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
scale_color_brewer(palette="Dark2") +
geom_point() +
stat_smooth()
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
stat_smooth()
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth()
aver <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
aver <- aver[aver$`FCB mes` < 1.75 & aver$`FCB mes` > 1, ]
aver <- aver[aver$`T°` < 10, ]
aver_agosto <- aver[aver$Fecha]
aver <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
aver <- aver[aver$`FCB mes` < 1.75 & aver$`FCB mes` > 1, ]
aver <- aver[aver$`T°` < 10, ]
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth()
aver <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
aver <- aver[aver$`FCB mes` < 1.75 & aver$`FCB mes` > 1, ]
aver <- aver[aver$`T°` > 10, ]
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth()
aver <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
aver <- aver[aver$`FCB mes` < 1.75 & aver$`FCB mes` > 1, ]
aver <- aver[aver$`T°` > 10, ]
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth()
aver <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
aver <- aver[aver$`FCB mes` < 1.75 & aver$`FCB mes` > 1, ]
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth()
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCB')
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológico')
ggplot(aver, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológica')
datosCentros <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
datosCentros <- datosCentros[datosCentros$`FCB mes` < 1.75 & datosCentros$`FCB mes` > 1, ]
ggplot(datosCentros, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológica')
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.8, list = FALSE)
library(tidyverse)
library(caret)
theme_set(theme_classic())
ggplot(datosCentros, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológica')
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- datosCentros[training.samples, ]
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.8, list = FALSE, na.rm = T)
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.8, list = FALSE)
datos <- complete.cases(readxl::read_excel("datos.xlsx"))
datosCentros <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
datosCentros <- datosCentros[datosCentros$`FCB mes` < 1.75 & datosCentros$`FCB mes` > 1, ]
datos <- readxl::read_excel("datos.xlsx")
datos <- datos[complete.cases(datos)]
datos <- readxl::read_excel("datos.xlsx")
datos <- datos[complete.cases(datos)]
datos <- readxl::read_excel("datos.xlsx")
datos <- datos[complete.cases(datos$`FCB mes`)]
datos <- datos[complete.cases(datos$`FCB mes`),]
datosCentros <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
datosCentros <- datosCentros[datosCentros$`FCB mes` < 1.75 & datosCentros$`FCB mes` > 1, ]
ggplot(datosCentros, aes(counter, `FCB mes`, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológica')
library(tidyverse)
library(caret)
theme_set(theme_classic())
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- datosCentros[training.samples, ]
test.data <- datosCentros[-training.samples, ]
ggplot(train.data, aes(lstat, medv) ) +
geom_point() +
stat_smooth()
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth()
# Regresión lineal
model <- lm(`FCB mes` ~ counter, data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`)) +
geom_point() +
stat_smooth(method = lm, formula = y ~ x)
# Regresión polinomial
lm(`FCB mes` ~ counter + I(counter^2), data = train.data)
# Regresión polinomial
model <- lm(`FCB mes` ~ counter + I(counter^2), data = train.data)
predictions <- model %>% predict(test.data)
# Model performance
data.frame(
RMSE = RMSE(predictions, test.data$medv),
R2 = R2(predictions, test.data$medv)
)
# Model performance
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(lstat, medv) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
# Regresión polinomial
model <- lm(`FCB mes` ~ poly(counter, 5, raw = TRUE), data = train.data)
predictions <- model %>% predict(test.data)
# Model performance
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
# Regresión logarítmica
model <- lm(`FCB mes` ~ log(counter), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ log(x))
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ log(x))
# Regresión con splines
knots <- quantile(train.data$counter, p = c(0.25, 0.5, 0.75))
# Regresión con splines
library(splines)
knots <- quantile(train.data$counter, p = c(0.25, 0.5, 0.75))
model <- lm (`FCB mes` ~ bs(counter, knots = knots), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(lstat, medv) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ splines::bs(x, df = 3))
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ splines::bs(x, df = 3))
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- datosCentros[training.samples, ]
test.data <- datosCentros[-training.samples, ]
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth()
# Regresión lineal
model <- lm(`FCB mes` ~ counter, data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`)) +
geom_point() +
stat_smooth(method = lm, formula = y ~ x)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth()
# Regresión lineal
model <- lm(`FCB mes` ~ counter, data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`)) +
geom_point() +
stat_smooth(method = lm, formula = y ~ x)
# Regresión polinomial de grado 5
model <- lm(`FCB mes` ~ poly(counter, 5, raw = TRUE), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
# Regresión logarítmica
model <- lm(`FCB mes` ~ log(counter), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ log(x))
# Regresión con splines
library(splines)
knots <- quantile(train.data$counter, p = c(0.25, 0.5, 0.75))
model <- lm (`FCB mes` ~ bs(counter, knots = knots), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ splines::bs(x, df = 3))
library(tidyverse)
library(caret)
theme_set(theme_classic())
training.samples <- datosCentros$`FCB mes` %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- datosCentros[training.samples, ]
test.data <- datosCentros[-training.samples, ]
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth()
# Regresión lineal
model <- lm(`FCB mes` ~ counter, data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`)) +
geom_point() +
stat_smooth(method = lm, formula = y ~ x)
# Regresión polinomial de grado 5
model <- lm(`FCB mes` ~ poly(counter, 5, raw = TRUE), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
# Regresión polinomial de grado 5
model <- lm(`FCB mes` ~ poly(counter, 4, raw = TRUE), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 4, raw = TRUE))
5
# Regresión polinomial de grado 5
model <- lm(`FCB mes` ~ poly(counter, 5, raw = TRUE), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
# Regresión logarítmica
model <- lm(`FCB mes` ~ log(counter), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ log(x))
# Regresión con splines
library(splines)
knots <- quantile(train.data$counter, p = c(0.25, 0.5, 0.75))
model <- lm (`FCB mes` ~ bs(counter, knots = knots), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ splines::bs(x, df = 3))
source('~/Desktop/electron/ceres-imvixa/src/r/curvas.R', echo=TRUE)
source('~/Desktop/electron/ceres-imvixa/src/r/curvas.R', echo=TRUE)
# Regresión polinomial de grado 5
model <- lm(`FCB mes` ~ poly(counter, 5, raw = TRUE), data = train.data) %>%
summary()
# Regresión polinomial de grado 5
lm(`FCB mes` ~ poly(counter, 5, raw = TRUE), data = train.data) %>%
summary()
# Regresión polinomial de grado 4
model <- lm(`FCB mes` ~ poly(counter, 4, raw = TRUE), data = train.data)
predictions <- model %>% predict(test.data)
data.frame(
RMSE = RMSE(predictions, test.data$`FCB mes`),
R2 = R2(predictions, test.data$`FCB mes`)
)
ggplot(train.data, aes(counter, `FCB mes`) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 4, raw = TRUE))
help("poly")
model %>% summary
model %>% summary
model <- lm (`FCB mes` ~ bs(counter, knots = knots), data = train.data)
model %>% summary
library(mgcv)
# Build the model
model <- gam(`FCB mes` ~ s(counter), data = train.data)
# Build the model
model <- gam(counter ~ s(counter), data = train.data)
# Build the model
model <- gam(`FCB mes` ~ s(counter), data = train.data)
datos <- readxl::read_excel("datos.xlsx")
names(datos) <- str_replace_all(names(datos), c(" " = "." , "," = "" ))
datos <- datos[complete.cases(datos$`FCB mes`),]
datos <- datos[complete.cases(datos$FCB.mes),]
# Build the model
model <- gam(FCB.mes ~ s(counter), data = train.data)
source('~/Desktop/electron/ceres-imvixa/src/r/curvas.R', echo=TRUE)
source('~/Desktop/electron/ceres-imvixa/src/r/curvas.R', echo=TRUE)
ggplot(train.data, aes(counter, FCB.mes) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ s(x))
ggplot(train.data, aes(counter, FCB.mes) ) +
geom_point() +
stat_smooth(method = lm, formula = y ~ s(x)))
ggplot(train.data, aes(counter, FCB.mes) ) +
geom_point() +
stat_smooth(method = gam, formula = y ~ s(x))
model %>% summary
help(s)
knitr::opts_chunk$set(echo = TRUE)
datos <- readxl::read_excel("datos.xlsx")
datos <- readxl::read_excel("datos.xlsx")
names(datos) <- str_replace_all(names(datos), c(" " = "." , "," = "" ))
datos <- datos[complete.cases(datos$FCB.mes),]
datosCentros <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
datosCentros <- datosCentros[datosCentros$FCB.mes < 1.75 & datosCentros$FCB.mes > 1, ]
ggplot(datosCentros, aes(counter, FCB.mes, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológica')
```{r, echo=FALSE}
datos <- readxl::read_excel("datos.xlsx")
names(datos) <- str_replace_all(names(datos), c(" " = ".", "," = ""))
datos <- datos[complete.cases(datos$FCB.mes),]
datosCentros <- datos %>% group_by(Hoja) %>% mutate(counter = row_number())
datosCentros <- datosCentros[datosCentros$FCB.mes < 1.75 & datosCentros$FCB.mes > 1, ]
ggplot(datosCentros, aes(counter, FCB.mes, color=`T°`)) +
geom_point() +
scale_color_gradient(low="blue", high="red") +
stat_smooth() +
xlab('Mes del ciclo') +
ylab('FCR biológica')
setwd("~/Desktop/electron/ceres-imvixa/src/r")
datos <- readxl::read_excel("datos.xlsx")
names(datos) <- str_replace_all(names(datos), c(" " = ".", "," = ""))
